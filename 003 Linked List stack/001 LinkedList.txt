// A simple C program to introduce
// a linked list
#include<stdio.h>
#include<stdlib.h>

struct Node_1{
    int data;
    struct Node_1 *next;
};


struct Node_1 * Create_node(){
    struct Node *temp;
    temp = (struct Node_1*)malloc(sizeof(struct Node_1));
    return temp;
}


// Program to create a simple linked
// list with 3 nodes
int main()
{

struct Node_1* head = NULL;
struct Node_1* second = NULL;
struct Node_1* third = NULL;

head =Create_node();
second =Create_node();
third =Create_node();

/* Three blocks have been allocated dynamically.
	We have pointers to these three blocks as first,
	second and third
	head		 second		 third
		|			 |			 |
		|			 |			 |
	+---+-----+	 +----+----+	 +----+----+
	| # | # |	 | # | # |	 | # | # |
	+---+-----+	 +----+----+	 +----+----+

# represents any random value.
Data is random because we haven’t assigned
anything yet */

head->data = 1; //assign data in first node
head->next = second; // Link first node with
					// the second node

/* data has been assigned to data part of first
	block (block pointed by head). And next
	pointer of first block points to second.
	So they both are linked.

	head		 second		 third
		|			 |			 |
		|			 |			 |
	+---+---+	 +----+----+	 +-----+----+
	| 1 | o----->| # | # |	 | # | # |
	+---+---+	 +----+----+	 +-----+----+
*/

// assign data to second node
second->data = 2;

// Link second node with the third node
second->next = third;

/* data has been assigned to data part of second
	block (block pointed by second). And next
	pointer of the second block points to third
	block. So all three blocks are linked.

	head		 second		 third
		|			 |			 |
		|			 |			 |
	+---+---+	 +---+---+	 +----+----+
	| 1 | o----->| 2 | o-----> | # | # |
	+---+---+	 +---+---+	 +----+----+	 */

third->data = 3; //assign data to third node
third->next = NULL;

/* data has been assigned to data part of third
	block (block pointed by third). And next pointer
	of the third block is made NULL to indicate
	that the linked list is terminated here.

	We have the linked list ready.

		head
			|
			|
		+---+---+	 +---+---+	 +----+------+
		| 1 | o----->| 2 | o-----> | 3 | NULL |
		+---+---+	 +---+---+	 +----+------+


	Note that only head is sufficient to represent
	the whole list. We can traverse the complete
	list by following next pointers. */

    print_nodes(head);
return 0;
}

void print_nodes(struct Node_1* head){

    while(head != NULL){
        printf("%d",head->data);
        head = head->next;
    }
}
